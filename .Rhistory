library(utildf)
document()
devtools::document()
library(utildf)
library(utildf)
library(utildf)
document()
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
devtools::document()
library(utildf)
install.packages("edgar")
library(edgar)
CompanyInfo("GOOG")
library(finreportr)
install.packages(finreportr)
install.packages("finreportr")
library(finreportr)
CompanyInfo("GOOG")
getFilingInfo('GOOG')
getFilingInfo('tesla')
install.packages("webreadr")
install.packages("edgarWebR")
install.packages("edgarWebR")
install.packages("RCurl")
library("edgar")
library("finreportr")
library("RCurl")
library("XML")
getCIK = function(ticker) {
stopifnot(is.character(ticker))
uri = "https://www.sec.gov/cgi-bin/browse-edgar"
response = getForm(uri,CIK=ticker,action="getcompany")
html = htmlParse(response)
CIKNode = getNodeSet(html, "//acronym[@title=\"Central Index Key\"][text() = \"CIK\"]")
CIKNodeText = sapply(CIKNode, function(x) xmlValue(getSibling(getSibling(x))))
CIK = sub(" .*","",CIKNodeText)
CIK = sub("^0*","",CIK)
CIK
}
CIK<-getCIK("AAPL")
CIK
CI<-edgar::getFilingInfo(CIK,filing.year=c(2019),form.type = '10-K')
CI
CI<-edgar::getFilingInfo(CIK,filing.year=c(2019),form.type = '10-K')
CI
MD<-edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
MD
SD<-getSentiment(cik.no= CIK, filing.year = c(2019), form.type = '10-K')
SD
MD<-edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
MD
SD<-getSentiment(cik.no= CIK, filing.year = c(2019), form.type = '10-K')
SD
MD<-edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
View(CI)
View(SD)
View(CI)
CI<-edgar::getFilingInfo(CIK,filing.year=c(2019),form.type = '10-K')
CI
MD<-edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
MD
getSentiment(cik.no= CIK, filing.year = c(2019), form.type = '10-K')
edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
install.packages(edgar)
install.packages("edgar")
install.packages("edgar")
library("edgar")
library("finreportr")
library("RCurl")
library("XML")
edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
setwd("~/Desktop/edgar")
library("edgar")
library("finreportr")
library("RCurl")
library("XML")
setwd("~/Desktop/edgar")
getCIK = function(ticker) {
stopifnot(is.character(ticker))
uri = "https://www.sec.gov/cgi-bin/browse-edgar"
response = getForm(uri,CIK=ticker,action="getcompany")
html = htmlParse(response)
CIKNode = getNodeSet(html, "//acronym[@title=\"Central Index Key\"][text() = \"CIK\"]")
CIKNodeText = sapply(CIKNode, function(x) xmlValue(getSibling(getSibling(x))))
CIK = sub(" .*","",CIKNodeText)
CIK = sub("^0*","",CIK)
CIK
}
CIK<-getCIK("AAPL")
CIK
CI<-edgar::getFilingInfo(CIK,filing.year=c(2019),form.type = '10-K')
CI
edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
MD
SD<-edgar::getSentiment(cik.no= CIK, filing.year = c(2019), form.type = '10-K')
SD
output <- getMgmtDisc(cik.no = c(1000180, 38079), filing.year = 2005)
View(output)
View(output)
edgar::getMgmtDisc(cik.no = CIK, filing.year = 2018)
edgar::getMgmtDisc(cik.no = CIK, filing.year = 2019)
dest.filename <- paste0("Edgar filings_full text/Form ", "10-K",
"/", CI, "/", CI, "_", "10-K", "_",
20191031, "_", 0000320193-19-000119, ".txt")
dest.filename
filing.text <- readLines(dest.filename)
edgar::getMgmtDisc(cik.no = CIK, filing.year = c(2017,2018,2019))
edgar::getFilingsHTML(cik.no = CIK, filing.year=c(2019))
edgar::getFilingsHTML(cik.no = CIK, filing.year=c(2019),form.type = '10-K')
edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2018))
edgar::getMgmtDisc(cik.no = CIK, filing.year=c(2019))
dfInc<-finreportr::GetIncome("AAPL",2018)
dfInc<-finreportr::GetIncome("AAPL",2017)
View(dfInc)
dfInc<-finreportr::GetIncome("AAPL",2018)
View(dfInc)
dfBal<-finreportr::GetBalanceSheet("AAPL",2017)
View(dfBal)
dfCF<-finreportr::GetCashFlow("APPL",2017)
dfCF<-finreportr::GetCashFlow("AAPL",2017)
View(dfCF)
View(dfBal)
View(dfBal)
library("tidyverse")
spread(dfInc,endDate,Amount)
x<-spread(dfInc,endDate,Amount)
View(x)
x<-dfInc%>%select(-startDate)%>%spread(endDate,Amount)
View(x)
View(dfInc)
x<-dfInc%>%select(-startDate)%>%spread(endDate,Amount)
x<-dfInc%>%select(-startDate)
View(x)
x<-dfInc%>%select(-startDate)%>%spread(endDate,Amount)
View(dfInc)
View(dfInc)
View(dfInc)
install.packages("naivebayes")
load("~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_testdata.csv")
train_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_traindata.csv", header=TRUE, sep=",")
View(train_data)
View(train_data)
data1<-select(train_data,fico_low,loan_status)%>%mutate(fico_low=as.factor(loan_status))
mod<-naive_bayes(loan_status~fico_low,data=data1)
library(naivebayes)
mod<-naive_bayes(loan_status~fico_low,data=data1)
data_frame(690)
data_frame(fico=690)
est_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_testdata.csv", header=TRUE, sep=",")
test_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_testdata.csv", header=TRUE, sep=",")
test_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_testdata.csv", header=TRUE, sep=",")
train_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_traindata.csv", header=TRUE, sep=",")
setwd("~/Desktop/Hull_ML_Book/Supervised Learning")
train_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_traindata.csv", header=TRUE, sep=",")
test_data<-read.csv(file="~/Desktop/Hull_ML_Book/Supervised Learning/lending files/lendingclub_testdata.csv", header=TRUE, sep=",")
test_default<-test_data$loan_status
View(test_data)
setwd("~/Desktop/edgar")
install.packages("glm")
